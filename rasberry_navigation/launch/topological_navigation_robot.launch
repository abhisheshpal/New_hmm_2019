<?xml version="1.0" ?>
<launch>
  <!-- declare arg to be passed in -->
  <arg name="mon_nav_config_file"  default="" />
  <arg name="max_bumper_recoveries" default=".inf"/>
  <arg name="wait_reset_bumper_duration" default="0.0"/>
  <arg name="topological_navigation_retries" default="3"/>
  <arg name="machine" default="localhost" />
  <arg name="user" default="" />
  <arg name="launch_manager" default="true"/>
  <arg name="execute_policy_retries" default="3"/>
  <arg name="move_base_reconf_service" default="DWAPlannerROS" />
  <arg name="reconfigure_edges" default="true" />
  <arg name="scenario" default="riseholme"/>
  <arg name="use_omni" default="false"/>

  <arg name="steering_type" value="omni" if="$(arg use_omni)"/>
  <arg name="steering_type" value="diff" unless="$(arg use_omni)"/>

  <arg name="multi_robot" default="false"/>


  <machine name="$(arg machine)" address="$(arg machine)" env-loader="$(optenv ROS_ENV_LOADER )" user="$(arg user)" default="true"/>

  <rosparam command="load" file="$(find rasberry_navigation)/config/topological_presence_topics.yaml" if="$(arg multi_robot)"/>

  <rosparam command="load" file="$(find rasberry_navigation)/config/$(arg scenario)_$(arg steering_type)_edge_reconfig_groups.yaml" if="$(arg reconfigure_edges)"/>


  <node pkg="monitored_navigation" type="monitored_nav.py" name="monitored_nav" output="screen" args="$(arg mon_nav_config_file)">
    <param name="wait_reset_bumper_duration" value="$(arg wait_reset_bumper_duration)"/>
    <rosparam param="/monitored_navigation/recover_states/recover_bumper" subst_value="True">[True, $(arg max_bumper_recoveries)]</rosparam>
  </node>


  <include file="$(find topological_navigation)/launch/reconf_at_edges_server.launch" if="$(arg reconfigure_edges)">
    <arg name="omni" value="$(arg use_omni)" />
  </include>


  <node pkg="topological_navigation" name="topological_localisation" type="localisation.py" output="screen" respawn="true"/>
  <node pkg="topological_navigation" name="topological_navigation" type="navigation.py" output="screen" respawn="true">
    <param name="retries" type="int" value="$(arg topological_navigation_retries)"/>
    <param name="move_base_reconf_service" type="str" value="$(arg move_base_reconf_service)"/>
    <param name="reconfigure_edges" type="bool" value="$(arg reconfigure_edges)"/>
  </node>

  <node pkg="topological_navigation" name="execute_policy_server" type="execute_policy_server.py" output="screen" respawn="true">
    <param name="retries" type="int" value="$(arg execute_policy_retries)"/>
    <param name="move_base_reconf_service" type="str" value="$(arg move_base_reconf_service)"/>
  </node>

</launch>
