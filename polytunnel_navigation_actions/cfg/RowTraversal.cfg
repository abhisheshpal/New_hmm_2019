#!/usr/bin/env python
PACKAGE = "polytunnel_navigation_actions"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("forward_speed", double_t, 0, "Constant forward velocity", 0.8, 0.1,   1.2)
gen.add("constant_forward_speed", bool_t, 0, "Stop when obstacle in safety area (no slowdown)", True)
gen.add("minimum_turning_speed", double_t, 0, "Minimum turning speed (only used for initial alignment)",    0.1, 0.01,   0.2)
gen.add("kp_ang_ro", double_t, 0, "Proportional gain for initial orientation target",    0.6, 0.01,   1.5)
gen.add("initial_heading_tolerance", double_t, 0, "Initial heading tolerance in radians",    0.025, 0.002,   0.1)
gen.add("kp_ang", double_t, 0, "Proportional gain for heading correction",    0.2, 0.01,   1.5)
gen.add("kp_y", double_t, 0, "Proportional gain for sideways correction",    0.1, 0.01,   1.5)
gen.add("granularity", double_t, 0, "Distance between local goals along path (carrots)", 0.5, 0.5,   1.5)
gen.add("y_row_detection_bias", double_t, 0, "Weight given to the reference given by row detection", 0.7, 0.0,   2.0)
gen.add("y_path_following_bias", double_t, 0, "Weight given to the original path following", 0.3, 0.0,   2.0)
gen.add("ang_row_detection_bias", double_t, 0, "Weight given to the angular reference given by row detection", 0.2, 0.0,   2.0)
gen.add("ang_path_following_bias", double_t, 0, "Weight given to the angular refernce given by path following", 0.8, 0.0,   2.0)

gen.add("emergency_clearance_x", double_t, 1, "Clearance from corner frames to trigger emergency stop in x", 0.22, 0.01,   0.5)
gen.add("emergency_clearance_y", double_t, 1, "Clearance from corner frames to trigger emergency stop in y", 0.22, 0.01,   0.5)

exit(gen.generate(PACKAGE, "row_traversal", "RowTraversal"))
