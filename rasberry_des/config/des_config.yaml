map_name: fork_map
des_env: simpy # simpy or ros
n_polytunnels: 0 # 0 - open farm, n - n polytunnels
n_farm_rows: [5] # number of rows in the farm (n_polytunnels == 0) or in a polytunnel (n_polytunnels >= 1). list with one value for open farm, one (func = 'copy') or n_polytunnels (func = 'none') values for polytunnels
n_farm_rows_func: none # function to be used while making dict of values - none, copy
head_row_node_dist: [5.0] # distance from head node to the first row node of each row (values for all rows (func = 'none') or for each polytunnels (func = 'copy'), or single value (func = 'copy'))
head_row_node_dist_func: copy # function to be used while making dict of values - none, copy
x_offset: [6.0] # x coordinates of corner LHS edge of farm (single value) / each polytunnel (n_polytunnel values or single value to be copied to all polytunnels).
x_offset_func: copy # function to be used while making dict of values - none, copy
y_offset: 0. # y coordinate of corner LHS edge of farm / first polytunnel. All rows are assumed to be above (+Y) it. 
row_node_dist: [2.0] # distance between two nodes in each row (values for all rows (func = 'none') or for each polytunnels (func = 'copy'), or single value (func = 'copy')), m
row_node_dist_func: copy # function to be used while making dict of values - none, copy
row_length: [10.0] # length of rows (values for all rows (func = 'none') or for each polytunnels (func = 'copy'), or single value (func = 'copy')), m
row_length_func: copy # function to be used while making dict of values - none, copy
row_spacing: [2] # spacing between two rows in the farm (values for all rows (func = 'none') or for each polytunnels (func = 'copy'), or single value (func = 'copy')), m
row_spacing_func: copy # function to be used while making dict of values - none, copy
second_head_lane: true # have another head lane at the other end of rows
n_pickers: 3 # number of pickers
picker_picking_rate: [0.2,0.02] # speed of pickers while picking (values for all pickers, or mu and sigma), m/s
picker_picking_rate_func: gauss # function to be used while making dict of values - none, copy, gauss
picker_transportation_rate: [1.0,0.04] # transportation speed of pickers (values for all pickers, or mu and sigma), m/s
picker_transportation_rate_func: gauss # function to be used while making dict of values - none, copy, gauss
picker_max_n_trays: [1] # maximum number of trays that can be carried by each pickers (values for all pickers, or single value to be copied)
picker_max_n_trays_func: copy # function to be used while making dict of values - none, copy
picker_unloading_time: [10.0, 0.2] # time required by each picker to unload a tray at local storage / robot (values for all pickers, or mu and sigma), s
picker_unloading_time_func: gauss # function to be used while making dict of values - none, copy, gauss
tray_capacity: 3000 # capacity of each tray, g 
yield_per_node: [200.0,5.0] # yield at a topo_nav node (from the node to the next), per row (values for all rows (n_polytunnels = 0) or all polytunnels, or mu and sigma), g
yield_per_node_func: gauss # function to be used while making dict of values - none, copy, gauss
n_local_storages: 1 # number of local storage stations
n_robots: 3 # number of robots in the farm
robot_transportation_rate: [1.0] # speed of a robot (values for all robots, or single value to be copied), m/s
robot_max_n_trays: [4] # maximum number of trays that can be carried by the robot (values for all robots, or single value to be copied)
robot_max_n_trays_func: copy # function to be used while making dict of values - none, copy
robot_unloading_time: [10] # time required by the robot to unload a tray at local storage (values for all pickers, or single value to be copied), s
dist_to_cold_storage: 1.5 # distance to the cold storage from the zeroth row head, m (optional)

